<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="1">
 <documentation>Dining Philosopher Problem example, including QXK and MPU isolation</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x01">
  <!--${Shared::AppSignals}-->
  <attribute name="AppSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    EAT_SIG = Q_USER_SIG, // published by Table to let a Philo eat
    DONE_SIG,       // published by Philo when done eating
    PAUSE_SIG,      // published by BSP to pause the application
    SERVE_SIG,      // published by BSP to serve re-start serving forks
    TEST_SIG,       // published by BSP to test the application
    MAX_PUB_SIG,    // the last published signal

    TIMEOUT_SIG,    // posted by time event to Philo
    HUNGRY_SIG,     // posted by hungry Philo to Table
    MAX_SIG         // the last signal
};</code>
  </attribute>
  <!--${Shared::produce_sig_dict}-->
  <operation name="produce_sig_dict?def Q_SPY" type="void" visibility="0x00" properties="0x02">
   <code>QS_SIG_DICTIONARY(EAT_SIG,     (void *)0);
QS_SIG_DICTIONARY(DONE_SIG,    (void *)0);
QS_SIG_DICTIONARY(PAUSE_SIG,   (void *)0);
QS_SIG_DICTIONARY(SERVE_SIG,   (void *)0);
QS_SIG_DICTIONARY(TEST_SIG,    (void *)0);

QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);
QS_SIG_DICTIONARY(HUNGRY_SIG,  (void *)0);</code>
  </operation>
  <!--${Shared::N_PHILO}-->
  <attribute name="N_PHILO" type="uint8_t" visibility="0x03" properties="0x00">
   <code>((uint8_t)5U)</code>
  </attribute>
  <!--${Shared::TableEvt}-->
  <class name="TableEvt" superclass="qpc::QEvt">
   <!--${Shared::TableEvt::philoId}-->
   <attribute name="philoId" type="uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::TableEvt::ctor}-->
   <operation name="ctor?def QEVT_DYN_CTOR" type="TableEvt *" visibility="0x00" properties="0x02">
    <!--${Shared::TableEvt::ctor::id}-->
    <parameter name="id" type="uint8_t"/>
    <code>if (me != (TableEvt *)0) {
    // don't call QEvt_ctor() because the initialization of all
    // QEvt attributes is already done in QF_QF_newX_()
    me-&gt;philoId = id;
}
return me;</code>
   </operation>
  </class>
  <!--${Shared::AO_Philo[N_PHILO]}-->
  <attribute name="AO_Philo[N_PHILO]" type="QActive * const" visibility="0x00" properties="0x00"/>
  <!--${Shared::Philo_ctor}-->
  <operation name="Philo_ctor" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::Philo_ctor::id}-->
   <parameter name="id" type="uint_fast8_t const"/>
   <!--${Shared::Philo_ctor::sto}-->
   <parameter name="sto" type="uint8_t * const"/>
   <!--${Shared::Philo_ctor::size}-->
   <parameter name="size" type="uint32_t const"/>
   <!--${Shared::Philo_ctor::mpu}-->
   <parameter name="mpu" type="void const * const"/>
   <code>Q_REQUIRE(sizeof(Philo) &lt;= size);

Philo *me = (Philo *)sto;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Philo_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U),
me-&gt;id = (uint8_t)id;
me-&gt;super.thread = mpu;</code>
  </operation>
  <!--${Shared::AO_Table}-->
  <attribute name="AO_Table" type="QActive * const" visibility="0x00" properties="0x00"/>
  <!--${Shared::Table_ctor}-->
  <operation name="Table_ctor" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::Table_ctor::sto}-->
   <parameter name="sto" type="uint8_t * const"/>
   <!--${Shared::Table_ctor::size}-->
   <parameter name="size" type="uint32_t const"/>
   <!--${Shared::Table_ctor::mpu}-->
   <parameter name="mpu" type="void const * const"/>
   <code>Q_REQUIRE(sizeof(Table) &lt;= size);

Table *me = (Table *)sto;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Table_initial));
for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = false;
}
me-&gt;super.thread = mpu;</code>
  </operation>
 </package>
 <!--${Shared-TH}-->
 <package name="Shared-TH" stereotype="0x02">
  <!--${Shared-TH::TH_XThread1}-->
  <attribute name="TH_XThread1" type="QXThread * const" visibility="0x00" properties="0x00"/>
  <!--${Shared-TH::XThread1_ctor}-->
  <operation name="XThread1_ctor" type="void" visibility="0x00" properties="0x00">
   <!--${Shared-TH::XThread1_ctor::sto}-->
   <parameter name="sto" type="uint8_t * const"/>
   <!--${Shared-TH::XThread1_ctor::size}-->
   <parameter name="size" type="uint32_t const"/>
   <!--${Shared-TH::XThread1_ctor::mpu}-->
   <parameter name="mpu" type="void const * const"/>
   <code>Q_REQUIRE(sizeof(XThread1) &lt;= size);

XThread1 *me = (XThread1 *)sto;
QXThread_ctor(&amp;me-&gt;super, &amp;XThread1_run, 0U);
me-&gt;super.super.thread = mpu;</code>
  </operation>
  <!--${Shared-TH::TH_XThread2}-->
  <attribute name="TH_XThread2" type="QXThread * const" visibility="0x00" properties="0x00"/>
  <!--${Shared-TH::XThread2_ctor}-->
  <operation name="XThread2_ctor" type="void" visibility="0x00" properties="0x00">
   <!--${Shared-TH::XThread2_ctor::sto}-->
   <parameter name="sto" type="uint8_t * const"/>
   <!--${Shared-TH::XThread2_ctor::size}-->
   <parameter name="size" type="uint32_t const"/>
   <!--${Shared-TH::XThread2_ctor::mpu}-->
   <parameter name="mpu" type="void const * const"/>
   <code>Q_REQUIRE(sizeof(XThread2) &lt;= size);

XThread2 *me = (XThread2 *)sto;
QXThread_ctor(&amp;me-&gt;super, &amp;XThread2_run, 0U);
me-&gt;super.super.thread = mpu;</code>
  </operation>
  <!--${Shared-TH::TH_sema}-->
  <attribute name="TH_sema" type="QXSemaphore" visibility="0x00" properties="0x00">
   <documentation>// NOTE: kernel objects can be allocated outside any memory regions
// accessible to the threads.</documentation>
  </attribute>
  <!--${Shared-TH::TH_mutex}-->
  <attribute name="TH_mutex" type="QXMutex" visibility="0x00" properties="0x00">
   <documentation>// NOTE: kernel objects can be allocated outside any memory regions
// accessible to the threads.</documentation>
  </attribute>
  <!--${Shared-TH::TH_obj_dict}-->
  <operation name="TH_obj_dict?def Q_SPY" type="void" visibility="0x00" properties="0x00">
   <code>QS_OBJ_DICTIONARY(TH_XThread1);
QS_OBJ_DICTIONARY(&amp;TH_XThread1-&gt;timeEvt);

QS_OBJ_DICTIONARY(TH_XThread2);
QS_OBJ_DICTIONARY(&amp;TH_XThread2-&gt;timeEvt);
QS_OBJ_DICTIONARY(&amp;TH_sema);
QS_OBJ_DICTIONARY(&amp;TH_mutex);</code>
  </operation>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Philo}-->
  <class name="Philo" superclass="qpc::QActive">
   <documentation>The Philo AO and the N_PHILO instances</documentation>
   <!--${AOs::Philo::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Philo::id}-->
   <attribute name="id" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::Philo::SM}-->
   <statechart properties="0x02">
    <!--${AOs::Philo::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);

#ifdef Q_SPY
Philo *Philo_inst = me;
QS_OBJ_ARR_DICTIONARY(Philo_inst, me-&gt;id);
QS_OBJ_ARR_DICTIONARY(&amp;Philo_inst-&gt;timeEvt, me-&gt;id);
#endif

QActive_subscribe(&amp;me-&gt;super, EAT_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);</action>
     <initial_glyph conn="2,4,5,1,20,7,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Philo::SM::thinking}-->
    <state name="thinking">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, think_time(), 0U);</entry>
     <exit>(void)QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::Philo::SM::thinking::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,20,14,-2">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::thinking::EAT, DONE}-->
     <tran trig="EAT, DONE">
      <action>// EAT or DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,20,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::thinking::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,24,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,18,20">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Philo::SM::hungry}-->
    <state name="hungry">
     <entry>#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, HUNGRY_SIG, me-&gt;id);
#else
TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
pe-&gt;philoId = me-&gt;id;
#endif
QACTIVE_POST(AO_Table, &amp;pe-&gt;super, &amp;me-&gt;super);</entry>
     <!--${AOs::Philo::SM::hungry::EAT}-->
     <tran trig="EAT">
      <!--${AOs::Philo::SM::hungry::EAT::[e->philoId==me->iid]}-->
      <choice target="../../../3">
       <guard brief="e-&gt;philoId == me-&gt;iid">Q_EVT_CAST(TableEvt)-&gt;philoId == me-&gt;id</guard>
       <choice_glyph conn="10,36,5,1,12,10,-2">
        <action box="1,0,23,6"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,36,3,-1,8">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::hungry::DONE}-->
     <tran trig="DONE">
      <action>// DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,40,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,28,18,14">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Philo::SM::eating}-->
    <state name="eating">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, eat_time(), 0U);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);

#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, DONE_SIG, me-&gt;id);
#else
TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
pe-&gt;philoId = me-&gt;id;
#endif
QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);</exit>
     <!--${AOs::Philo::SM::eating::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,54,3,1,22,-41,-4">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::eating::EAT, DONE}-->
     <tran trig="EAT, DONE">
      <action>// EAT or DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,58,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,44,18,18">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="36,64"/>
   </statechart>
  </class>
  <!--${AOs::Table}-->
  <class name="Table" superclass="qpc::QActive">
   <!--${AOs::Table::fork[N_PHILO]}-->
   <attribute name="fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::Table::isHungry[N_PHILO]}-->
   <attribute name="isHungry[N_PHILO]" type="bool" visibility="0x02" properties="0x00"/>
   <!--${AOs::Table::SM}-->
   <statechart properties="0x02">
    <!--${AOs::Table::SM::initial}-->
    <initial target="../1/2">
     <action>Q_UNUSED_PAR(par);

#ifdef Q_SPY
Table *Table_inst = me;
QS_OBJ_DICTIONARY(Table_inst);
#endif

QActive_subscribe(&amp;me-&gt;super, DONE_SIG);
QActive_subscribe(&amp;me-&gt;super, PAUSE_SIG);
QActive_subscribe(&amp;me-&gt;super, SERVE_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);

for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = false;
    BSP_displayPhilStat(n, THINKING);
}</action>
     <initial_glyph conn="2,4,5,1,46,20,-10">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Table::SM::active}-->
    <state name="active">
     <!--${AOs::Table::SM::active::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,12,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Table::SM::active::EAT}-->
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="2,16,3,-1,14">
       <action box="0,-2,10,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Table::SM::active::serving}-->
     <state name="serving">
      <entry brief="give pending permissions to eat">// give permissions to eat...
for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    if (me-&gt;isHungry[n]
        &amp;&amp; (me-&gt;fork[left(n)] == FREE)
        &amp;&amp; (me-&gt;fork[n] == FREE))
    {
        me-&gt;fork[left(n)] = USED;
        me-&gt;fork[n] = USED;
#ifdef QEVT_DYN_CTOR
        TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
#else
        TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
        pe-&gt;philoId = n;
#endif
        QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
        me-&gt;isHungry[n] = false;
        BSP_displayPhilStat(n, EATING);
    }
}</entry>
      <!--${AOs::Table::SM::active::serving::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, HUNGRY);
uint8_t m = left(n);</action>
       <!--${AOs::Table::SM::active::serving::HUNGRY::[bothfree]}-->
       <choice>
        <guard brief="both free">(me-&gt;fork[m] == FREE) &amp;&amp; (me-&gt;fork[n] == FREE)</guard>
        <action>me-&gt;fork[m] = USED;
me-&gt;fork[n] = USED;

#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
#else
TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
pe-&gt;philoId = n;
#endif
QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
BSP_displayPhilStat(n, EATING);</action>
        <choice_glyph conn="20,28,5,-1,12">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::Table::SM::active::serving::HUNGRY::[else]}-->
       <choice>
        <guard>else</guard>
        <action>me-&gt;isHungry[n] = true;</action>
        <choice_glyph conn="20,28,4,-1,4,12">
         <action box="1,4,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,28,3,-1,16">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::DONE}-->
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = left(n);

// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;
m = right(n); // check the right neighbor

if (me-&gt;isHungry[m] &amp;&amp; (me-&gt;fork[m] == FREE)) {
    me-&gt;fork[n] = USED;
    me-&gt;fork[m] = USED;
    me-&gt;isHungry[m] = false;
#ifdef QEVT_DYN_CTOR
    TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
#else
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoId = m;
#endif
    QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
    BSP_displayPhilStat(m, EATING);
}
m = left(n); // check the left neighbor
n = left(m); // left fork of the left neighbor
if (me-&gt;isHungry[m] &amp;&amp; (me-&gt;fork[n] == FREE)) {
    me-&gt;fork[m] = USED;
    me-&gt;fork[n] = USED;
    me-&gt;isHungry[m] = false;
#ifdef QEVT_DYN_CTOR
    TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
#else
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoId = m;
#endif
    QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
    BSP_displayPhilStat(m, EATING);
}</action>
       <tran_glyph conn="4,36,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::EAT}-->
      <tran trig="EAT">
       <action>Q_ERROR();</action>
       <tran_glyph conn="4,40,3,-1,16">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::PAUSE}-->
      <tran trig="PAUSE" target="../../3">
       <tran_glyph conn="4,44,3,1,36,8,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,20,34,26">
       <entry box="1,2,27,2"/>
      </state_glyph>
     </state>
     <!--${AOs::Table::SM::active::paused}-->
     <state name="paused">
      <entry>BSP_displayPaused(1U);</entry>
      <exit>BSP_displayPaused(0U);</exit>
      <!--${AOs::Table::SM::active::paused::SERVE}-->
      <tran trig="SERVE" target="../../2">
       <tran_glyph conn="4,62,3,1,38,-31,-4">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::paused::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

me-&gt;isHungry[n] = true;
BSP_displayPhilStat(n, HUNGRY);</action>
       <tran_glyph conn="4,66,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::paused::DONE}-->
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = left(n);

// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;</action>
       <tran_glyph conn="4,70,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,48,34,24">
       <entry box="1,2,18,4"/>
       <exit box="1,6,18,4"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,44,68"/>
    </state>
    <state_diagram size="50,76"/>
   </statechart>
  </class>
 </package>
 <!--${XThreads}-->
 <package name="XThreads" stereotype="0x02">
  <!--${XThreads::XThread1}-->
  <class name="XThread1" superclass="qpc::QXThread">
   <!--${XThreads::XThread1::foo}-->
   <attribute name="foo" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>// NOTE: data needed by this thread should be members of
// the thread class. That way they are in the memory region
// accessible from this thread.</documentation>
   </attribute>
   <!--${XThreads::XThread1::run}-->
   <operation name="run" type="void" visibility="0x02" properties="0x01">
    <!--${XThreads::XThread1::run::thr}-->
    <parameter name="thr" type="QXThread * const"/>
    <code>// downcast the generic thr pointer to the specific thread
XThread1 *me = (XThread1 *)thr;

// subscribe to the EAT signal (from the application)
QActive_subscribe(&amp;me-&gt;super.super, EAT_SIG);

for (;;) {
    QEvt const *e = QXThread_queueGet(BSP_TICKS_PER_SEC/4U);
    if (e) {
        QXSemaphore_signal(&amp;TH_sema); // signal Thread2
        QF_gc(e); // must explicitly recycle the received event!
    }

    QXMutex_lock(&amp;TH_mutex, QXTHREAD_NO_TIMEOUT); // lock the mutex
    BSP_ledOn();
    if (QXMutex_tryLock(&amp;TH_mutex)) { // exercise the mutex
        // some floating point code to exercise the VFP...
        float volatile x = 1.4142135F;
        x = x * 1.4142135F;
        QXThread_delay(10U);  // BLOCK while holding a mutex
        QXMutex_unlock(&amp;TH_mutex);
    }
    QXMutex_unlock(&amp;TH_mutex);
    BSP_ledOff();
}</code>
   </operation>
  </class>
  <!--${XThreads::XThread2}-->
  <class name="XThread2" superclass="qpc::QXThread">
   <!--${XThreads::XThread2::foo}-->
   <attribute name="foo" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>// NOTE: data needed by this thread should be members of
// the thread class. That way they are in the memory region
// accessible from this thread.</documentation>
   </attribute>
   <!--${XThreads::XThread2::run}-->
   <operation name="run" type="void" visibility="0x02" properties="0x01">
    <!--${XThreads::XThread2::run::thr}-->
    <parameter name="thr" type="QXThread * const"/>
    <code>// downcast the generic thr pointer to the specific thread
//XThread2 *me = (XThread2 *)thr;

// initialize the semaphore before using it
// NOTE: Here the semaphore is initialized in the highest-priority thread
// that uses it. Alternatively, the semaphore can be initialized
// before any thread runs.
QXSemaphore_init(&amp;TH_sema,
            0U,  // count==0 (signaling semaphore)
            1U); // max_count==1 (binary semaphore)

// initialize the mutex before using it
// NOTE: Here the mutex is initialized in the highest-priority thread
// that uses it. Alternatively, the mutex can be initialized
// before any thread runs.
QXMutex_init(&amp;TH_mutex, N_PHILO + 6U); // priority-ceiling mutex
//QXMutex_init(&amp;TH_mutex, 0U); // alternatively: priority-ceiling NOT used

for (;;) {
    // wait on a semaphore (BLOCK indefinitely)
    QXSemaphore_wait(&amp;TH_sema, QXTHREAD_NO_TIMEOUT);

    QXMutex_lock(&amp;TH_mutex, QXTHREAD_NO_TIMEOUT); // lock the mutex
    QXThread_delay(5U);  // wait more (BLOCK)
    QXMutex_unlock(&amp;TH_mutex);
}</code>
   </operation>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::dpp.h}-->
  <file name="dpp.h">
   <text>#ifndef DPP_H_
#define DPP_H_

$declare ${Shared}

#ifdef QXK_H_
$declare ${Shared-TH}
#endif // QXK_H_

#endif // DPP_H_</text>
  </file>
  <!--${.::philo.c}-->
  <file name="philo.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

$declare ${AOs::Philo}

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide a randomized think time for Philos
static QTimeEvtCtr think_time(void); // prototype
static inline QTimeEvtCtr think_time(void) {
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
                                        + (BSP_TICKS_PER_SEC/2U));
}

// helper function to provide a randomized eat time for Philos
static QTimeEvtCtr eat_time(void); // prototype
static inline QTimeEvtCtr eat_time(void) {
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
                                        + BSP_TICKS_PER_SEC);
}
//----------------------------------------------------------------------------

$define ${Shared::Philo_ctor}

$define ${AOs::Philo}</text>
  </file>
  <!--${.::table.c}-->
  <file name="table.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

$declare ${AOs::Table}

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide the RIGHT neighbor of a Philo[n]
static inline uint8_t right(uint8_t const n) {
    return (uint8_t)((n + (N_PHILO - 1U)) % N_PHILO);
}

// helper function to provide the LEFT neighbor of a Philo[n]
static inline uint8_t left(uint8_t const n) {
    return (uint8_t)((n + 1U) % N_PHILO);
}

#define FREE ((uint8_t)0U)
#define USED ((uint8_t)1U)

#define THINKING &quot;thinking&quot;
#define HUNGRY   &quot;hungry  &quot;
#define EATING   &quot;eating  &quot;

//----------------------------------------------------------------------------

$define ${Shared::Table_ctor}

$define ${AOs::Table}</text>
  </file>
 </directory>
 <!--${qxk}-->
 <directory name="qxk">
  <!--${qxk::xthread1.c}-->
  <file name="xthread1.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

//----------------------------------------------------------------------------
$define ${Shared-TH::TH_sema}
$define ${Shared-TH::TH_mutex}

$declare ${XThreads::XThread1}
$define ${Shared-TH::XThread1_ctor}
$define ${Shared-TH::TH_obj_dict}
$define ${XThreads::XThread1}</text>
  </file>
  <!--${qxk::xthread2.c}-->
  <file name="xthread2.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

//----------------------------------------------------------------------------
$declare ${XThreads::XThread2}
$define ${Shared-TH::XThread2_ctor}
$define ${XThreads::XThread2}</text>
  </file>
 </directory>
</model>
