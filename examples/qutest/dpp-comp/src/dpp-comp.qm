<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="1">
 <documentation>Dining Philosopher Problem example with the &quot;Orthogonal Component&quot; state pattern (see https://state-machine.com/doc/Pattern_Orthogonal.pdf)

The model demonstrates the following features:

1. Partitioning the application into Container and Components
2. Packages for Container (Cont) and Components (Comp)
3. External packages with separate QM-package model files
4. CompTimeEvt class for private time evnents of Components
5. Container to Component communication via synchronous event dispatching
6. Component to Container communication via asynchronous event posting using the LIFO policy.</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x01">
  <!--${Shared::AppSignals}-->
  <attribute name="AppSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    EAT_SIG = Q_USER_SIG, // published by Table to let a Philo eat
    DONE_SIG,       // published by Philo when done eating
    PAUSE_SIG,      // published by BSP to pause the application
    SERVE_SIG,      // published by BSP to serve re-start serving forks
    TEST_SIG,       // published by BSP to test the application
    MAX_PUB_SIG,    // the last published signal

    TIMEOUT_SIG,    // posted by time event to Philo
    HUNGRY_SIG,     // posted by hungry Philo to Table
    MAX_SIG         // the last signal
};</code>
  </attribute>
  <!--${Shared::produce_sig_dict}-->
  <operation name="produce_sig_dict?def Q_SPY" type="void" visibility="0x00" properties="0x02">
   <code>QS_SIG_DICTIONARY(EAT_SIG,     (void *)0);
QS_SIG_DICTIONARY(DONE_SIG,    (void *)0);
QS_SIG_DICTIONARY(PAUSE_SIG,   (void *)0);
QS_SIG_DICTIONARY(SERVE_SIG,   (void *)0);
QS_SIG_DICTIONARY(TEST_SIG,    (void *)0);

QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);
QS_SIG_DICTIONARY(HUNGRY_SIG,  (void *)0);</code>
  </operation>
  <!--${Shared::N_PHILO}-->
  <attribute name="N_PHILO" type="uint8_t" visibility="0x03" properties="0x00">
   <code>((uint8_t)5U)</code>
  </attribute>
  <!--${Shared::TableEvt}-->
  <class name="TableEvt" superclass="qpc::QEvt">
   <!--${Shared::TableEvt::philoId}-->
   <attribute name="philoId" type="uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::TableEvt::ctor}-->
   <operation name="ctor?def QEVT_DYN_CTOR" type="TableEvt *" visibility="0x00" properties="0x02">
    <!--${Shared::TableEvt::ctor::id}-->
    <parameter name="id" type="uint8_t"/>
    <code>if (me != (TableEvt *)0) {
    // don't call QEvt_ctor() because the initialization of all
    // QEvt attributes is already done in QF_QF_newX_()
    me-&gt;philoId = id;
}
return me;</code>
   </operation>
  </class>
  <!--${Shared::AO_Table}-->
  <attribute name="AO_Table" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Table_inst.super;</code>
  </attribute>
  <!--${Shared::Table_ctor}-->
  <operation name="Table_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Table *me = &amp;Table_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Table_initial));

for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    Philo_ctor(n); // create the Philo component

    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;
}</code>
  </operation>
 </package>
 <!--${Cont}-->
 <package name="Cont" stereotype="0x02">
  <!--${Cont::Table}-->
  <class name="Table" superclass="qpc::QActive">
   <!--${Cont::Table::inst}-->
   <attribute name="inst" type="Table" visibility="0x00" properties="0x01">
    <documentation>The only static instance of the Table class (Singleton pattern)</documentation>
   </attribute>
   <!--${Cont::Table::fork[N_PHILO]}-->
   <attribute name="fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${Cont::Table::isHungry[N_PHILO]}-->
   <attribute name="isHungry[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${Cont::Table::SM}-->
   <statechart properties="0x03">
    <!--${Cont::Table::SM::initial}-->
    <initial target="../1/3">
     <action>(void)par; // unused parameter

QS_OBJ_DICTIONARY(&amp;Table_inst);

QActive_subscribe(&amp;me-&gt;super, PAUSE_SIG);
QActive_subscribe(&amp;me-&gt;super, SERVE_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);

for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;

    QASM_INIT(SM_Philo[n], (void *)0, QS_AP_ID + n);
    BSP_displayPhilStat(n, &quot;thinking&quot;);
}</action>
     <initial_glyph conn="3,3,5,1,43,25,-8">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${Cont::Table::SM::active}-->
    <state name="active">
     <!--${Cont::Table::SM::active::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>uint16_t n = Q_EVT_CAST(CompTimeEvt)-&gt;compNum;
QASM_DISPATCH(SM_Philo[n], e, QS_AP_ID + n);</action>
      <tran_glyph conn="2,11,3,-1,14">
       <action box="0,-2,26,4"/>
      </tran_glyph>
     </tran>
     <!--${Cont::Table::SM::active::EAT}-->
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="2,16,3,-1,14">
       <action box="0,-2,10,4"/>
      </tran_glyph>
     </tran>
     <!--${Cont::Table::SM::active::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,22,3,-1,14">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${Cont::Table::SM::active::serving}-->
     <state name="serving">
      <entry brief="give pending permissions to eat">for (uint8_t n = 0U; n &lt; N_PHILO; ++n) { // give permissions to eat...
    if ((me-&gt;isHungry[n] != 0U)
        &amp;&amp; (me-&gt;fork[left(n)] == FREE)
        &amp;&amp; (me-&gt;fork[n] == FREE))
    {
        me-&gt;fork[left(n)] = USED;
        me-&gt;fork[n] = USED;

        // synchronously dispatch EAT event to the Philo component
        TableEvt const evt = {
            QEVT_INITIALIZER(EAT_SIG),
            .philoId = n
        };
        QASM_DISPATCH(SM_Philo[n], &amp;evt.super, QS_AP_ID + n);

        me-&gt;isHungry[n] = 0U;
        BSP_displayPhilStat(n, &quot;eating  &quot;);
    }
}</entry>
      <!--${Cont::Table::SM::active::serving::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>// find the index of the Philo from the event
uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;
// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;hungry  &quot;);
uint8_t m = left(n);</action>
       <!--${Cont::Table::SM::active::serving::HUNGRY::[bothfree]}-->
       <choice>
        <guard brief="both free">(me-&gt;fork[m] == FREE) &amp;&amp; (me-&gt;fork[n] == FREE)</guard>
        <action>me-&gt;fork[m] = USED;
me-&gt;fork[n] = USED;

// synchronously dispatch EAT event to the Philo component
TableEvt const evt = {
    QEVT_INITIALIZER(EAT_SIG),
    .philoId = n
};
QASM_DISPATCH(SM_Philo[n], &amp;evt.super, QS_AP_ID + n);
BSP_displayPhilStat(n, &quot;eating  &quot;);</action>
        <choice_glyph conn="20,33,5,-1,10">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${Cont::Table::SM::active::serving::HUNGRY::[else]}-->
       <choice>
        <guard>else</guard>
        <action>me-&gt;isHungry[n] = 1U;</action>
        <choice_glyph conn="20,33,4,-1,5,10">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,33,3,-1,16">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <!--${Cont::Table::SM::active::serving::DONE}-->
      <tran trig="DONE">
       <action>// find the index of the Philo from the event
uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;
// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;thinking&quot;);
uint8_t m = left(n);
// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;
m = right(n); // check the right neighbor

if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[m] == FREE)) {
    me-&gt;fork[n] = USED;
    me-&gt;fork[m] = USED;
    me-&gt;isHungry[m] = 0U;

    // synchronously dispatch EAT event to the Philo component
    TableEvt const evt = {
        QEVT_INITIALIZER(EAT_SIG),
        .philoId = m
    };
    QASM_DISPATCH(SM_Philo[m], &amp;evt.super, QS_AP_ID + m);
    BSP_displayPhilStat(m, &quot;eating  &quot;);
}
m = left(n); // check the left neighbor
n = left(m); // left fork of the left neighbor
if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[n] == FREE)) {
    me-&gt;fork[m] = USED;
    me-&gt;fork[n] = USED;
    me-&gt;isHungry[m] = 0U;

    // synchronously dispatch EAT event to the Philo component
    TableEvt const evt = {
        QEVT_INITIALIZER(EAT_SIG),
        .philoId = m
    };
    QASM_DISPATCH(SM_Philo[m], &amp;evt.super, QS_AP_ID + m);
    BSP_displayPhilStat(m, &quot;eating  &quot;);
}</action>
       <tran_glyph conn="4,41,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${Cont::Table::SM::active::serving::EAT}-->
      <tran trig="EAT">
       <action>Q_ERROR();</action>
       <tran_glyph conn="4,44,3,-1,16">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <!--${Cont::Table::SM::active::serving::PAUSE}-->
      <tran trig="PAUSE" target="../../4">
       <tran_glyph conn="4,48,3,1,36,6,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,26,34,24">
       <entry box="1,2,27,2"/>
      </state_glyph>
     </state>
     <!--${Cont::Table::SM::active::paused}-->
     <state name="paused">
      <entry>BSP_displayPaused(1U);</entry>
      <exit>BSP_displayPaused(0U);</exit>
      <!--${Cont::Table::SM::active::paused::SERVE}-->
      <tran trig="SERVE" target="../../3">
       <tran_glyph conn="4,64,3,1,38,-20,-4">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <!--${Cont::Table::SM::active::paused::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>// find the index of the Philo from the event
uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;
// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

me-&gt;isHungry[n] = 1U;
BSP_displayPhilStat(n, &quot;hungry  &quot;);</action>
       <tran_glyph conn="4,68,3,-1,16">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${Cont::Table::SM::active::paused::DONE}-->
      <tran trig="DONE">
       <action>// find the index of the Philo from the event
uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;
// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;thinking&quot;);
uint8_t m = left(n);
// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;</action>
       <tran_glyph conn="4,72,3,-1,16">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,52,34,22">
       <entry box="1,2,18,4"/>
       <exit box="1,6,18,4"/>
      </state_glyph>
     </state>
     <state_glyph node="2,5,42,71"/>
    </state>
    <state_diagram size="50,78"/>
   </statechart>
  </class>
 </package>
 <!--${Comp}-->
 <package name="Comp" stereotype="0x02">
  <!--${Comp::CompTimeEvt}-->
  <class name="CompTimeEvt" superclass="qpc::QTimeEvt">
   <documentation>Specialized time event for components. The time event can be owned by a component and can dispatch itself to the component.</documentation>
   <!--${Comp::CompTimeEvt::compNum}-->
   <attribute name="compNum" type="uint16_t" visibility="0x00" properties="0x00"/>
   <!--${Comp::CompTimeEvt::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <documentation>The constructor to initialize a Component Time Event.

When creating a Time-Event, you must commit it to a specific active object 'act',  event signal 'sig', and tick rate 'tickRate'. You cannot change these attributes later.</documentation>
    <!--${Comp::CompTimeEvt::ctor::act}-->
    <parameter name="act" type="QActive *"/>
    <!--${Comp::CompTimeEvt::ctor::num}-->
    <parameter name="num" type="uint16_t"/>
    <!--${Comp::CompTimeEvt::ctor::sig}-->
    <parameter name="sig" type="enum_t const"/>
    <!--${Comp::CompTimeEvt::ctor::tickRate}-->
    <parameter name="tickRate" type="uint_fast8_t const"/>
    <code>QTimeEvt_ctorX(&amp;me-&gt;super, act, sig, tickRate);
me-&gt;compNum = num;</code>
   </operation>
  </class>
  <!--${Comp::Philo}-->
  <class name="Philo" superclass="qpc::QHsm">
   <!--${Comp::Philo::inst[N_PHILO]}-->
   <attribute name="inst[N_PHILO]" type="Philo" visibility="0x00" properties="0x01"/>
   <!--${Comp::Philo::timeEvt}-->
   <attribute name="timeEvt" type="CompTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${Comp::Philo::getId}-->
   <operation name="getId" type="uint8_t" visibility="0x00" properties="0x02">
    <code>return (uint8_t)(me - &amp;Philo_inst[0]);</code>
   </operation>
   <!--${Comp::Philo::SM}-->
   <statechart properties="0x01">
    <!--${Comp::Philo::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);

#ifdef Q_SPY
uint8_t id = (uint8_t)(me - &amp;Philo_inst[0]);
QS_OBJ_ARR_DICTIONARY(&amp;Philo_inst[id], id);
QS_OBJ_ARR_DICTIONARY(&amp;Philo_inst[id].timeEvt, id);
#endif

// the following code outputs the &quot;fun-dictionaries&quot; only once for
// all Philo instances, as opposed to repeat them for every instance.
static bool registered = false;
if (!registered) {
    registered = true;

    QS_FUN_DICTIONARY(&amp;Philo_initial);
    QS_FUN_DICTIONARY(&amp;Philo_thinking);
    QS_FUN_DICTIONARY(&amp;Philo_hungry);
    QS_FUN_DICTIONARY(&amp;Philo_eating);
}</action>
     <initial_glyph conn="2,4,5,1,20,5,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${Comp::Philo::SM::thinking}-->
    <state name="thinking">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt.super, THINK_TIME, 0U);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt.super);</exit>
     <!--${Comp::Philo::SM::thinking::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,20,10,-2">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <!--${Comp::Philo::SM::thinking::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,20,3,-1,13">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,18,16">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <!--${Comp::Philo::SM::hungry}-->
    <state name="hungry">
     <entry>// asynchronously post event to the Container
#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, HUNGRY_SIG, Philo_getId(me));
#else
TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
pe-&gt;philoId = Philo_getId(me);
#endif
QACTIVE_POST_LIFO(AO_Table, &amp;pe-&gt;super);</entry>
     <!--${Comp::Philo::SM::hungry::EAT}-->
     <tran trig="EAT" target="../../3">
      <tran_glyph conn="2,31,3,1,20,11,-2">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,24,18,14">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <!--${Comp::Philo::SM::eating}-->
    <state name="eating">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt.super, EAT_TIME, 0U);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt.super);

// asynchronously post event to the Container
#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, DONE_SIG, Philo_getId(me));
#else
TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
pe-&gt;philoId = Philo_getId(me);
#endif
QACTIVE_POST_LIFO(AO_Table, &amp;pe-&gt;super);</exit>
     <!--${Comp::Philo::SM::eating::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,50,3,1,22,-39,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,40,18,14">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="28,56"/>
   </statechart>
  </class>
  <!--${Comp::SM_Philo[N_PHILO]}-->
  <attribute name="SM_Philo[N_PHILO]" type="QAsm * const" visibility="0x00" properties="0x00">
   <code>= { // opaque pointers to Philo instances
    (QAsm *)&amp;Philo_inst[0],
    (QAsm *)&amp;Philo_inst[1],
    (QAsm *)&amp;Philo_inst[2],
    (QAsm *)&amp;Philo_inst[3],
    (QAsm *)&amp;Philo_inst[4]
};</code>
  </attribute>
  <!--${Comp::Philo_ctor}-->
  <operation name="Philo_ctor" type="void" visibility="0x00" properties="0x01">
   <!--${Comp::Philo_ctor::n}-->
   <parameter name="n" type="uint8_t"/>
   <code>Philo *me = &amp;Philo_inst[n];
QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Philo_initial));
CompTimeEvt_ctor(&amp;me-&gt;timeEvt, AO_Table, n, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::dpp.h}-->
  <file name="dpp.h">
   <text>#ifndef DPP_H_
#define DPP_H_

$declare ${Shared}

$declare ${Comp::CompTimeEvt}
$declare ${Comp::SM_Philo[N_PHILO]}
$declare ${Comp::Philo_ctor}

#endif // DPP_H_</text>
  </file>
  <!--${.::philo.c}-->
  <file name="philo.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;

//Q_DEFINE_THIS_FILE

$declare ${Comp::Philo}

// helper macros to provide a randomized think time for Philos
#define THINK_TIME  \
    (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC) + (BSP_TICKS_PER_SEC/2U))
#define EAT_TIME    \
    (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC) + BSP_TICKS_PER_SEC)

// definition of the whole &quot;Comp&quot; package
$define ${Comp}</text>
  </file>
  <!--${.::table.c}-->
  <file name="table.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

// helper function to provide the RIGHT neighbor of a Philo[n]
static inline uint8_t right(uint8_t const n) {
    return (uint8_t)((n + (N_PHILO - 1U)) % N_PHILO);
}

// helper function to provide the LEFT neighbor of a Philo[n]
static inline uint8_t left(uint8_t const n) {
    return (uint8_t)((n + 1U) % N_PHILO);
}

#define FREE ((uint8_t)0U)
#define USED ((uint8_t)1U)

#define THINKING &quot;thinking&quot;
#define HUNGRY   &quot;hungry  &quot;
#define EATING   &quot;eating  &quot;

$declare ${Cont::Table}

$define ${Shared::Table_ctor}
$define ${Shared::AO_Table}
$define ${Cont}</text>
  </file>
 </directory>
</model>
