<?xml version="1.0" encoding="UTF-8"?>
<model version="4.6.0" links="1">
 <documentation>The improved Calculator model with QMsm state machine implementation strategy and Sub-Machines.</documentation>
 <!--${qpc}-->
 <framework name="qpc" license="../../../QPC-EVAL.qlc"/>
 <!--${Events}-->
 <package name="Events" stereotype="0x01">
  <!--${Events::CalcEvt}-->
  <class name="CalcEvt" superclass="qpc::QEvt">
   <!--${Events::CalcEvt::key_code}-->
   <attribute name="key_code" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <!--${SMs}-->
 <package name="SMs" stereotype="0x02">
  <!--${SMs::Calc}-->
  <class name="Calc" superclass="qpc::QMsm">
   <documentation>Calculator state machine</documentation>
   <!--${SMs::Calc::op1}-->
   <attribute name="op1" type="double" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::op2}-->
   <attribute name="op2" type="double" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::oper1}-->
   <attribute name="oper1" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::oper2}-->
   <attribute name="oper2" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::inst}-->
   <attribute name="inst" type="Calc" visibility="0x00" properties="0x01">
    <documentation>the single inst of the Calc object (Singleton pattern)</documentation>
   </attribute>
   <!--${SMs::Calc::eval}-->
   <operation name="eval" type="bool" visibility="0x02" properties="0x00">
    <documentation>/* guard function to evaluate the current expression
* taking into account the precedence of operands.
* return: true if evaluation successfull
* false when error encountered
*/</documentation>
    <!--${SMs::Calc::eval::op}-->
    <parameter name="op" type="double"/>
    <!--${SMs::Calc::eval::oper}-->
    <parameter name="oper" type="uint8_t"/>
    <code>double result;
if ((oper == KEY_NULL) || (oper == KEY_PLUS) || (oper == KEY_MINUS)) {
    switch (me-&gt;oper2) {
        case KEY_MULT: {
            me-&gt;op2 *= op;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; op) &amp;&amp; (op &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); /* divide by zero */
                return false;
            }
            me-&gt;op2 /= op;
            break;
         }
         default: { /* no op2 yet */
            me-&gt;op2 = op;
            me-&gt;oper2 = oper;
            break;
         }
    }
    switch (me-&gt;oper1) {
        case KEY_PLUS: {
            me-&gt;op1 += me-&gt;op2;
            break;
        }
        case KEY_MINUS: {
            me-&gt;op1 -= me-&gt;op2;
            break;
        }
        case KEY_MULT: {
            me-&gt;op1 *= me-&gt;op2;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; me-&gt;op2) &amp;&amp; (me-&gt;op2 &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); /* divide by zero */
                return false;
            }
            me-&gt;op1 /= me-&gt;op2;
            break;
        }
        default: {
            Q_ERROR();
            break;
        }
    }
    me-&gt;oper1 = oper;
    me-&gt;oper2 = KEY_NULL;
    result = me-&gt;op1;
}
else { /* (oper == KEY_MULT) || (oper == KEY_DIV) */
    switch (me-&gt;oper2) {
        case KEY_MULT: {
            me-&gt;op2 *= op;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; op) &amp;&amp; (op &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); /* divide by zero */
                return false;
            }
            me-&gt;op2 /= op;
            break;
        }
        default: { /* oper2 not provided yet */
            me-&gt;op2 = op;
            break;
        }
    }
    me-&gt;oper2 = oper;
    result = me-&gt;op2;
}

if ((result &lt; -99999999.0) || (99999999.0 &lt; result)) {
    BSP_display_error(&quot; Error 1 &quot;); /* out of range */
    return false;
}
if ((-0.0000001 &lt; result) &amp;&amp; (result &lt; 0.0000001)) {
    result = 0.0;
}
BSP_display(result);

return true;</code>
   </operation>
   <!--${SMs::Calc::SM}-->
   <statechart properties="0x01">
    <!--${SMs::Calc::SM::initial}-->
    <initial target="../1">
     <action>(void)e; /* unused parameter */</action>
     <initial_glyph conn="2,2,5,1,94,4,-2">
      <action box="1,-2,13,4"/>
     </initial_glyph>
    </initial>
    <!--${SMs::Calc::SM::on}-->
    <state name="on">
     <entry>BSP_message(&quot;on-ENTRY;&quot;);</entry>
     <exit>BSP_message(&quot;on-EXIT;&quot;);</exit>
     <!--${SMs::Calc::SM::on::initial}-->
     <initial target="../4">
      <action>BSP_message(&quot;on-INIT;&quot;);
BSP_clear();</action>
      <initial_glyph conn="49,10,5,1,13,8,-2">
       <action box="1,0,5,2"/>
      </initial_glyph>
     </initial>
     <!--${SMs::Calc::SM::on::C}-->
     <tran trig="C" target="..">
      <tran_glyph conn="2,12,3,1,92">
       <action box="0,-2,12,4"/>
      </tran_glyph>
     </tran>
     <!--${SMs::Calc::SM::on::OFF}-->
     <tran trig="OFF" target="../../2">
      <tran_glyph conn="2,14,3,1,94,86,-78">
       <action box="0,0,5,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::Calc::SM::on::error}-->
     <state name="error">
      <documentation>/* Error state after evaluation of an expression.
This state can be exited only throgh the inherited C (Clear) event.
*/</documentation>
      <entry>BSP_message(&quot;error-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;error-EXIT;&quot;);</exit>
      <state_glyph node="12,58,10,8">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::ready}-->
     <state name="ready">
      <entry>BSP_message(&quot;ready-ENTRY;&quot;);
me-&gt;oper2 = KEY_NULL;</entry>
      <exit>BSP_message(&quot;ready-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::ready::initial}-->
      <initial target="../6">
       <action>BSP_message(&quot;ready-INIT;&quot;);</action>
       <initial_glyph conn="20,20,5,0,20,2">
        <action box="0,-2,6,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::Calc::SM::on::ready::DIGIT_0}-->
      <tran trig="DIGIT_0" target="../../6" cpref="../../../3/0">
       <action>BSP_clear();</action>
       <tran_glyph conn="20,34,2,0,3,-1,2">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../6" cpref="../../../3/1">
       <action>BSP_clear();
BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="37,34,2,0,3,-2,2">
        <action box="1,0,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::POINT}-->
      <tran trig="POINT" target="../../6" cpref="../../../3/2">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="55,34,2,0,3,-3,2">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::OPER}-->
      <tran trig="OPER" target="../../5">
       <action>me-&gt;op1 = BSP_get_value();
me-&gt;oper1 = Q_EVT_CAST(CalcEvt)-&gt;key_code;</action>
       <tran_glyph conn="60,24,1,1,32,38,-32">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::result}-->
      <state name="result">
       <entry>BSP_message(&quot;result-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;result-EXIT;&quot;);</exit>
       <state_glyph node="16,22,10,10">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::ready::begin}-->
      <state name="begin">
       <entry>BSP_message(&quot;begin-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;begin-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::ready::begin::OPER}-->
       <tran trig="OPER">
        <!--${SMs::Calc::SM::on::ready::begin::OPER::[e->key=='-']}-->
        <choice target="../../../../6" cpref="../../../../../3/3">
         <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
         <choice_glyph conn="42,30,5,0,26,9">
          <action box="1,0,11,2"/>
         </choice_glyph>
        </choice>
        <!--${SMs::Calc::SM::on::ready::begin::OPER::[else]}-->
        <choice>
         <guard>else</guard>
         <choice_glyph conn="42,30,4,-1,-4,4">
          <action box="1,-3,6,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="32,30,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="32,22,16,10">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="10,16,50,18">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::opEntered}-->
     <state name="opEntered">
      <entry>BSP_message(&quot;opEntered-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;opEntered-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::opEntered::DIGIT_0}-->
      <tran trig="DIGIT_0" target="../../7" cpref="../../../3/0">
       <action>BSP_clear();</action>
       <tran_glyph conn="30,72,2,0,4,-11,3">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../7" cpref="../../../3/1">
       <action>BSP_clear();
BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="40,72,2,0,4,-5,3">
        <action box="1,0,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::POINT}-->
      <tran trig="POINT" target="../../7" cpref="../../../3/2">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="55,72,2,0,5,-3,2">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::OPER}-->
      <tran trig="OPER">
       <!--${SMs::Calc::SM::on::opEntered::OPER::[e->key=='-']}-->
       <choice target="../../../7" cpref="../../../../3/3">
        <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
        <choice_glyph conn="36,68,5,0,32,11">
         <action box="1,0,11,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::opEntered::OPER::[else]}-->
       <choice>
        <guard>else</guard>
        <choice_glyph conn="36,68,4,-1,-4,4">
         <action box="1,-3,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="28,68,3,-1,8">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="28,58,32,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::operand1}-->
     <smstate name="operand1" submachine="../../3">
      <!--${SMs::Calc::SM::on::operand1::CE}-->
      <xpseg xpref="../../../3/4" target="../../4">
       <action>BSP_message(&quot;operand1:XP-CE;&quot;);</action>
       <xpseg_glyph conn="86,47,1,1,2,-19,-28">
        <action box="0,-8,11,5"/>
       </xpseg_glyph>
      </xpseg>
      <!--${SMs::Calc::SM::on::operand1::EQUALS}-->
      <tran trig="EQUALS" target="../../4/5">
       <tran_glyph conn="10,48,3,3,-2,-20,8">
        <action box="1,-1,10,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand1::OPER}-->
      <tran trig="OPER" target="../../5">
       <action>me-&gt;op1 = BSP_get_value();
me-&gt;oper1 = Q_EVT_CAST(CalcEvt)-&gt;key_code;</action>
       <tran_glyph conn="44,52,2,0,6">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <smstate_glyph node="10,40,76,12"/>
     </smstate>
     <!--${SMs::Calc::SM::on::operand2}-->
     <smstate name="operand2" submachine="../../3">
      <!--${SMs::Calc::SM::on::operand2::CE}-->
      <xpseg xpref="../../../3/4" target="../../5">
       <action>BSP_message(&quot;operand2:XP-CE;&quot;);</action>
       <xpseg_glyph conn="86,87,1,1,2,-21,-28">
        <action box="0,-9,11,5"/>
       </xpseg_glyph>
      </xpseg>
      <!--${SMs::Calc::SM::on::operand2::OPER}-->
      <tran trig="OPER">
       <!--${SMs::Calc::SM::on::operand2::OPER::[Calc_eval(me,BSP_get_value(),Q_~}-->
       <choice target="../../../5">
        <guard>Calc_eval(me, BSP_get_value(), Q_EVT_CAST(CalcEvt)-&gt;key_code)</guard>
        <choice_glyph conn="8,70,5,3,20">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::operand2::OPER::[else]}-->
       <choice target="../../../3">
        <guard brief="else"/>
        <choice_glyph conn="8,70,4,3,-6,4">
         <action box="0,-6,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="10,84,3,-1,-2,-14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand2::EQUALS}-->
      <tran trig="EQUALS">
       <!--${SMs::Calc::SM::on::operand2::EQUALS::[else]}-->
       <choice target="../../../3">
        <guard brief="else"/>
        <choice_glyph conn="4,60,5,3,8">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::operand2::EQUALS::[Calc_eval(me,BSP_get_value(),KE~}-->
       <choice target="../../../4/5">
        <guard>Calc_eval(me, BSP_get_value(), KEY_NULL)
</guard>
        <choice_glyph conn="4,60,4,3,-34,12">
         <action box="-1,-6,12,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="10,88,3,-1,-6,-28">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <smstate_glyph node="10,80,76,12"/>
     </smstate>
     <state_glyph node="2,4,92,92">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <!--${SMs::Calc::SM::final}-->
    <state name="final">
     <entry>BSP_message(&quot;final-ENTRY;&quot;);
BSP_exit();</entry>
     <state_glyph node="2,98,16,6">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <!--${SMs::Calc::SM::operand}-->
    <submachine name="operand">
     <entry>BSP_message(&quot;operand-ENTRY;&quot;);</entry>
     <exit>BSP_message(&quot;operand-EXIT;&quot;);</exit>
     <!--${SMs::Calc::SM::operand::EP-zero}-->
     <epseg name="zero" target="../6">
      <action>BSP_message(&quot;operand::EP-zero;&quot;);</action>
      <epseg_glyph conn="12,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${SMs::Calc::SM::operand::EP-intgr}-->
     <epseg name="intgr" target="../7">
      <action>BSP_message(&quot;operand::EP-intgr;&quot;);</action>
      <epseg_glyph conn="30,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${SMs::Calc::SM::operand::EP-frac}-->
     <epseg name="frac" target="../8">
      <action>BSP_message(&quot;operand::EP-frac;&quot;);</action>
      <epseg_glyph conn="49,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${SMs::Calc::SM::operand::EP-neg}-->
     <epseg name="neg" target="../9">
      <action>BSP_message(&quot;operand::EP-neg;&quot;);</action>
      <epseg_glyph conn="68,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${SMs::Calc::SM::operand::XP-CE}-->
     <xp name="CE">
      <xp_glyph point="88,18,1">
       <name box="-3,-3,10,2"/>
      </xp_glyph>
     </xp>
     <!--${SMs::Calc::SM::operand::CE}-->
     <tran trig="CE" target=".." cpref="../4">
      <action>BSP_message(&quot;operand::CE;&quot;);
BSP_clear();</action>
      <tran_glyph conn="84,30,2,1,-12,3">
       <action box="-3,-2,4,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::Calc::SM::operand::zero}-->
     <state name="zero">
      <entry>BSP_message(&quot;zero-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;zero-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::operand::zero::DIGIT_0}-->
      <tran trig="DIGIT_0">
       <action>;</action>
       <tran_glyph conn="6,21,3,-1,10">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::zero::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../7">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="6,18,3,3,16,-6,2">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::zero::POINT}-->
      <tran trig="POINT" target="../../8">
       <action>BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="8,23,2,2,2,40,-2">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,10,14,13">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::operand::intgr}-->
     <state name="intgr">
      <entry>BSP_message(&quot;intgr-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;intgr-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::operand::intgr::POINT}-->
      <tran trig="POINT" target="../../8">
       <action>BSP_insert((int)'.');</action>
       <tran_glyph conn="24,18,3,3,16,-6,2">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::intgr::DIGIT_0, DIGIT_1_9}-->
      <tran trig="DIGIT_0, DIGIT_1_9">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="24,21,3,-1,10">
        <action box="0,-2,14,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="24,10,14,13">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::operand::frac}-->
     <state name="frac">
      <entry>BSP_message(&quot;frac-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;frac-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::operand::frac::POINT}-->
      <tran trig="POINT">
       <action>;</action>
       <tran_glyph conn="42,21,3,-1,10">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::frac::DIGIT_0, DIGIT_1_9}-->
      <tran trig="DIGIT_0, DIGIT_1_9">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="42,18,3,-1,10">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,10,14,13">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::operand::negated}-->
     <state name="negated">
      <entry>BSP_message(&quot;negated-ENTRY;&quot;);
BSP_negate();</entry>
      <exit>BSP_message(&quot;negated-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::operand::negated::DIGIT_0}-->
      <tran trig="DIGIT_0" target="../../6">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="60,22,2,2,4,-44,-3">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::negated::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../7">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="67,22,2,2,5,-35,-4">
        <action box="0,0,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::negated::POINT}-->
      <tran trig="POINT" target="../../8">
       <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="75,22,2,2,6,-25,-5">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::operand::negated::OPER}-->
      <tran trig="OPER">
       <!--${SMs::Calc::SM::operand::negated::OPER::[else]}-->
       <choice>
        <guard>else</guard>
        <choice_glyph conn="68,18,4,-1,-4,8">
         <action box="1,-4,6,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::operand::negated::OPER::[e->key=='-']}-->
       <choice>
        <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
        <action>;</action>
        <choice_glyph conn="68,18,5,-1,8">
         <action box="1,0,11,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="58,18,3,-1,10">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="58,10,22,12">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <submachine_diagram size="86,28">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </submachine_diagram>
    </submachine>
    <state_diagram size="98,106"/>
   </statechart>
  </class>
  <!--${SMs::the_calc}-->
  <attribute name="the_calc" type="QHsm * const" visibility="0x00" properties="0x00">
   <documentation>Opaque pointer to the Calc HSM</documentation>
   <code>= &amp;Calc_inst.super;</code>
  </attribute>
  <!--${SMs::Calc_ctor}-->
  <operation name="Calc_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>Calc *me = &amp;Calc_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Calc_initial));</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::calc1_sub.h}-->
  <file name="calc1_sub.h">
   <text>#ifndef CALC1_SUB_H
#define CALC1_SUB_H

enum CalcSignals {
    C_SIG = Q_USER_SIG,
    CE_SIG,
    DIGIT_0_SIG,
    DIGIT_1_9_SIG,
    POINT_SIG,
    OPER_SIG,
    EQUALS_SIG,
    OFF_SIG
};

$declare${Events::CalcEvt}
$declare${SMs::Calc_ctor}

extern QHsm * const the_calc;  /* &quot;opaque&quot; pointer to calculator HSM */

#endif /* CALC1_SUB_H */
</text>
  </file>
  <!--${.::calc1_sub.c}-->
  <file name="calc1_sub.c">
   <text>#include &quot;qpc.h&quot;   /* QP/C */
#include &quot;bsp.h&quot;   /* board support package */
#include &quot;calc1_sub.h&quot; /* application */

Q_DEFINE_THIS_FILE

#define KEY_NULL    '\0'
#define KEY_PLUS    '+'
#define KEY_MINUS   '-'
#define KEY_MULT    '*'
#define KEY_DIVIDE  '/'

$declare${SMs::Calc}

$define${SMs::the_calc}
$define${SMs::Calc_ctor}
$define${SMs::Calc}</text>
  </file>
 </directory>
</model>
