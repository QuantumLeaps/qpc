<?xml version="1.0" encoding="UTF-8"?>
<model version="4.6.0" links="1">
 <documentation>Dining Philosopher Problem example with the &quot;Orthogonal Component&quot; state pattern (see https://state-machine.com/doc/Pattern_Orthogonal.pdf)

The model demonstrates the following features:

1. Partitioning the application into Container and Components
2. Packages for Container (Cont) and Components (Comp)
3. External packages with speparate QM-package model files
4. CompTimeEvt class for private time evnents of Components
5. Container to Component communication via synchronous event dispatching
6. Component to Container communication via asynchronous event posting using the LIFO policy.</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <package file="./cont/cont.qmp"/>
 <package file="./comp/comp.qmp"/>
</model>
